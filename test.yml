- hosts: localhost
  connection: local

  tasks:
  - name: Ensure VM is not created
    vagrant: path={{ playbook_dir }}/resources/vagrant state=destroyed

  - name: Ensure VM is running
    vagrant: 
      path={{ playbook_dir }}/resources/vagrant state=running # add_root_key=~/.ssh/id_rsa.pub use_private_key=~/.ssh/id_rsa
    register: vm
    no_log: yes

  - debug: var=vm

  - name: Ensure VM is stopped
    vagrant: path={{ playbook_dir }}/resources/vagrant state=stopped

  - name: Create Run-Time Inventory
    add_host:
      hostname: "vm"
      ansible_connection: "paramiko"
      ansible_host: "{{ vm.ip }}"
      ansible_port: "{{ vm.port }}"
      ansible_user: "{{ vm.user }}"
      ansible_ssh_private_key_file: "{{ vm.key }}"
      os_name: "{{ vm.os_name }}"
      memory: "{{ vm.memory }}"      

  - name: Ensure VM is stopped
    vagrant: path={{ playbook_dir }}/resources/vagrant state=stopped
  
  - name: Ensure VM is destroyed
    vagrant: path={{ playbook_dir }}/resources/vagrant state=destroyed

- hosts: vm

  vars:
    os_discovered: "{{ ansible_distribution }} release {{ ansible_distribution_version }} ({{ ansible_distribution_release }})"

  tasks:
  - debug: var=inventory_hostname

  - debug: msg="ansible_kernel = {{ ansible_kernel }}"
  - debug: msg="ansible_memtotal_mb = {{ ansible_memtotal_mb }}"
  - debug: msg="memory in mb = {{ memory|int / 1024 }}"
  - debug: msg="OS = {{ os_discovered }}"
  - debug: msg="OS = {{ os_name }}"
  - debug: msg="{{ ansible_user }}"

- hosts: localhost
  connection: local

  tasks:
  - vagrant: path={{ playbook_dir }}/resources/vagrant state=destroyed
  - vagrant: path={{ playbook_dir }}/resources/vagrant state=destroyed

